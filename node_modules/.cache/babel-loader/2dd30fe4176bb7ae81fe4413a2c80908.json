{"ast":null,"code":"import _slicedToArray from \"/home/anush/Documents/Projects/React Js/splitwise/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/anush/Documents/Projects/React Js/splitwise/src/Components/Dashboard/Dashboard.js\";\nimport React, { useState } from 'react';\nimport DashboardHeader from './DashboardHeader';\nimport DashboardIntro from './DashboardIntro';\nimport DashboardOutro from './DashboardOutro';\nimport ExpenseTracker from './Expence/ExpenseTracker';\nimport ModalExpense from './ModalExpense';\nimport SettleExpense from './SettleExpense';\n\nfunction Dashboard() {\n  const _useState = useState([{\n    dash: \"dash-intro\",\n    visibility: true\n  }, {\n    dash: \"dash-outro\",\n    visibility: false\n  }, {\n    dash: \"dash-exp\",\n    visibility: false\n  }, {\n    modal: false\n  }, {\n    settle: false\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        view = _useState2[0],\n        setView = _useState2[1];\n\n  function handleView(newView) {\n    setView(newView);\n  }\n\n  function CustomRender(props) {\n    const dashCurrent = props.viewType.map(item => {\n      if (item.dash == \"dash-intro\" && item.visibility) {\n        return React.createElement(DashboardIntro, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        });\n      }\n\n      if (item.dash == \"dash-outro\" && item.visibility) {\n        return React.createElement(DashboardOutro, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      }\n\n      if (item.dash == \"dash-exp\" && item.visibility) {\n        return React.createElement(ExpenseTracker, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      }\n    });\n    return dashCurrent;\n  }\n\n  function HandleModal(props) {\n    const ModalCurrent = props.viewType.map(item => {\n      if (item.dash == \"dash-intro\" && item.visibility) {\n        React.createElement(ModalExpense, {\n          method: handleView,\n          viewModal: view,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      }\n\n      if (item.dash == \"dash-outro\" && item.visibility) {\n        React.createElement(SettleExpense, {\n          method: handleView,\n          viewModal: view,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        });\n      }\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"dashboard-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(DashboardHeader, {\n    method: handleView,\n    viewType: view,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(CustomRender, {\n    viewType: view,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(HandleModal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/anush/Documents/Projects/React Js/splitwise/src/Components/Dashboard/Dashboard.js"],"names":["React","useState","DashboardHeader","DashboardIntro","DashboardOutro","ExpenseTracker","ModalExpense","SettleExpense","Dashboard","dash","visibility","modal","settle","view","setView","handleView","newView","CustomRender","props","dashCurrent","viewType","map","item","HandleModal","ModalCurrent"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\nimport DashboardHeader from './DashboardHeader'\nimport DashboardIntro from './DashboardIntro'\nimport DashboardOutro from './DashboardOutro'\nimport ExpenseTracker from './Expence/ExpenseTracker'\nimport ModalExpense from './ModalExpense'\nimport SettleExpense from './SettleExpense'\n\n\nfunction Dashboard(){\n    const [view, setView] = useState([\n        {\n            dash:\"dash-intro\",\n            visibility: true\n        },\n        {\n            dash:\"dash-outro\",\n            visibility: false\n        },\n        {\n            dash:\"dash-exp\",\n            visibility: false\n        },\n        {\n            modal:false\n        },\n        {\n            settle:false\n        }\n    ]);\n    function handleView(newView){\n        setView(newView)\n    }\n    function CustomRender(props){\n        const dashCurrent = props.viewType.map(item => {\n            if(item.dash == \"dash-intro\" && item.visibility){\n                return <DashboardIntro />\n            }\n            if(item.dash == \"dash-outro\" && item.visibility){\n                return  <DashboardOutro />\n            }\n            if(item.dash == \"dash-exp\" && item.visibility){\n                return <ExpenseTracker />\n            }\n        })\n        return dashCurrent\n    }\n    function HandleModal(props){\n        const ModalCurrent = props.viewType.map( item => {\n            if(item.dash == \"dash-intro\" && item.visibility){\n                <ModalExpense method={handleView} viewModal={view}/>\n            \n            }\n            if(item.dash == \"dash-outro\" && item.visibility){\n                <SettleExpense method={handleView} viewModal={view}/>\n            }\n        })\n    }\n    return (\n        <>\n            <div className=\"dashboard-content\">\n                <DashboardHeader method={handleView} viewType={view}/>\n                <CustomRender viewType={view}/>\n            </div>\n            <HandleModal />\n        </>\n    )\n}\n\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}